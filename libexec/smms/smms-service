#!/usr/bin/env bash
set -e

# shellcheck source=./../../lib/smms/common.bash
source "${SMMS_ROOT}/lib/smms/common.bash"
# shellcheck source=./../../lib/smms/applications.bash
source "${SMMS_ROOT}/lib/smms/applications.bash"
# shellcheck source=./../../lib/smms/services.bash
source "${SMMS_ROOT}/lib/smms/services.bash"

start_services() {
	local service s

	for s in "${start[@]}"; do
		for service in "${SMMS_SERVICES[@]}"; do
			if SMMS_SERVICE_LIST "${service}" "${s}"; then
				[[ $(${service}_service_status "${s}") ]] && print_warn "Service ${s} has an incorrect configuration"
				SMMS_SERVICE "${service}" start "${s}"
			fi
		done
	done
}

restart_services() {
	local service s

	for s in "${restart[@]}"; do
		for service in "${SMMS_SERVICES[@]}"; do
			if SMMS_SERVICE_LIST "${service}" "${s}"; then
				if ! ${service}_service_status "${s}"; then
					print_error "Service ${s} has an incorrect configuration"
				else
					SMMS_SERVICE "${service}" stop "${s}"
					SMMS_SERVICE_KILL "${service}" "${s}"
					SMMS_SERVICE "${service}" start "${s}"
				fi
			fi
		done
	done
}

stop_services() {
	local service s

	for s in "${stop[@]}"; do
		for service in "${SMMS_SERVICES[@]}"; do
			if SMMS_SERVICE_LIST "${service}" "${s}"; then
				[[ $(${service}_service_status "${s}") ]] && print_warn "Service ${s} has an incorrect configuration"
				SMMS_SERVICE "${service}" stop "${s}"
				SMMS_SERVICE_KILL "${service}" "${s}"
			fi
		done
	done
}

reload_services() {
	local service s

	for s in "${reload[@]}"; do
		for service in "${SMMS_SERVICES[@]}"; do
			if SMMS_SERVICE_LIST "${service}" "${s}"; then
				if ! ${service}_service_status "${s}"; then
					print_warn "Service ${s} has an incorrect configuration"
					continue
				fi

				SMMS_SERVICE "${service}" reload "${s}"
			fi
		done
	done
}

status_services() {
	local service s

	for s in "${status[@]}"; do
		for service in "${SMMS_SERVICES[@]}"; do
			if SMMS_SERVICE_LIST "${service}" "${s}"; then
				if $(${service}_service_status "${s}"); then
					print_info "Service ${s} has a correct configuration"
				else
					print_info "Service ${s} has an incorrect configuration"
				fi
			fi
		done
	done
}

# Parse command line options.
opt_parse() {
	SEP="$(printf '\037')"
	POS=''
	while [ "${#}" -gt '0' ]; do
		case "${1?}" in
		# Short options that accept a value need a "*" in their pattern because they can be found in the "-A<value>" form.
		'start')
			if [ "${#}" -eq '1' ]; then
				optDie "No services to start"
			fi
			shift
			while [ "${#}" -gt '0' ]; do
				start+=("${1?}")
				shift
			done
			return
			;;
		'stop')
			if [ "${#}" -eq '1' ]; then
				optDie "No services to stop"
			fi
			shift
			while [ "${#}" -gt '0' ]; do
				stop+=("${1?}")
				shift
			done
			return
			;;
		'reload')
			if [ "${#}" -eq '1' ]; then
				optDie "No services to reload"
			fi
			shift
			while [ "${#}" -gt '0' ]; do
				reload+=("${1?}")
				shift
			done
			return
			;;
		'restart')
			if [ "${#}" -eq '1' ]; then
				optDie "No services to restart"
			fi
			shift
			while [ "${#}" -gt '0' ]; do
				restart+=("${1?}")
				shift
			done
			return
			;;
		'status')
			if [ "${#}" -eq '1' ]; then
				optDie "No services to check"
			fi
			shift
			while [ "${#}" -gt '0' ]; do
				status+=("${1?}")
				shift
			done
			return
			;;
		'-q' | '--quiet' | '--no-quiet')
			optArgBool "${@-}"
			quiet="${optArg:?}"
			;;
		'-d' | '--debug' | '--no-debug')
			optArgBool "${@-}"
			debug="${optArg:?}"
			;;
		'-x'* | '--color')
			optArgStr "${@-}"
			color="${optArg?}"
			shift "${optShift:?}"
			;;
		'-v' | '--version') show_version ;;
		'-h' | '--help') show_help ;;
		# If "--" is found, the remaining positional parameters are saved and the parsing ends.
		--)
			shift
			_IFS="${IFS?}"
			IFS="${SEP:?}"
			POS="${POS-}${POS+${SEP:?}}${*-}"
			IFS="${_IFS?}"
			break
			;;
		# If a long option in the form "--opt=value" is found, it is split into "--opt" and "value".
		--*=*)
			optSplitEquals "${@-}"
			shift
			set -- "${optName:?}" "${optArg?}" "${@-}"
			continue
			;;
		# If an option did not match any pattern, an error is thrown.
		-? | --*) optDie "Illegal option ${1:?}" ;;
		# If multiple short options in the form "-AB" are found, they are split into "-A" and "-B".
		-?*)
			optSplitShort "${@-}"
			shift
			set -- "${optAName:?}" "${optBName:?}" "${@-}"
			continue
			;;
		# If a positional parameter is found, it is saved.
		*) POS="${POS-}${POS+${SEP:?}}${1?}" ;;
		esac
		shift
	done
}
optSplitShort() {
	optAName="${1%"${1#??}"}"
	optBName="-${1#??}"
}
optSplitEquals() {
	optName="${1%="${1#--*=}"}"
	optArg="${1#--*=}"
}
optArgStr() {
	if [ -n "${1#??}" ] && [ "${1#--}" = "${1:?}" ]; then
		optArg="${1#??}"
		optShift='0'
	elif [ -n "${2+x}" ]; then
		optArg="${2-}"
		optShift='1'
	else optDie "No argument for ${1:?} option"; fi
}
optArgBool() {
	if [ "${1#--no-}" = "${1:?}" ]; then
		optArg='true'
	else optArg='false'; fi
}
optDie() {
	printf '%s\n' "${@-}" "Try 'smms --help' for more information" >&2
	exit 2
}

show_help() {
	local cmd="${0##*/}"

	cat <<HELP_TEXT_HEADER
Usage: ${cmd} [OPTIONS]..
       ${cmd} [-h | -v]
HELP_TEXT_HEADER

	cat <<'HELP_TEXT_BODY'
   SMMS OPTIONS:
	    ACTIONS:
	     stop
	        Stop (deactivate) one or more services specified
	     start
	        Start (activate) one or more services specified
	     restart
	        Stop and then start one or more services specified if it is ok
	     reload
	        Reload their configuration of one or more services specified
	     status
	        Show runtime status information about of one or more services specified

	    MISC OPTIONS:
	     --[no-]debug
	        Show the commands to run.
	        (default: ${debug?})%NL
	     -q, --[no-]quiet
	        Suppress non-error messages.
	        (default: ${quiet?})%NL
	     -x, --color <auto|true|false>
	        Colorize the output.
	        (default: ${color?})%NL
	     -v, --version
	        Show version number and quit.%NL
	     -h, --help
	        Show this help and quit.%NL

HELP_TEXT_BODY
	exit 0
}

# Show version number and quit.
show_version() {
	printf 'SMMS %s\n' "$SMMS_VERSION"
	exit 0
}

main() {
	start=()
	stop=()
	reload=()
	restart=()
	status=()
	debug="false"
	quiet="false"
	color="true"

	# Parse command line options.
	# shellcheck disable=SC2086
	{
		opt_parse "${@-}"
		_IFS="${IFS?}"
		IFS="${SEP:?}"
		set -- ${POS-} >/dev/null
		IFS="${_IFS?}"
	}

	# Define terminal colors if the color option is enabled or in auto mode if STDOUT is attached to a TTY and the
	# "NO_COLOR" variable is not set (https://no-color.org).
	if [ "${color:?}" = 'true' ] || { [ "${color:?}" = 'auto' ] && [ -z "${NO_COLOR+x}" ] && [ -t 1 ]; }; then
		COLOR_RESET="$({ exists tput && tput sgr0; } 2>/dev/null || printf '\033[0m')"
		COLOR_BRED="$({ exists tput && tput bold && tput setaf 1; } 2>/dev/null || printf '\033[1;31m')"
		COLOR_BGREEN="$({ exists tput && tput bold && tput setaf 2; } 2>/dev/null || printf '\033[1;32m')"
		COLOR_BYELLOW="$({ exists tput && tput bold && tput setaf 3; } 2>/dev/null || printf '\033[1;33m')"
		COLOR_BCYAN="$({ exists tput && tput bold && tput setaf 6; } 2>/dev/null || printf '\033[1;36m')"
		color=""
	else
		color=" --color n"
	fi

	# Set "NO_STDOUT" variable if the quiet option is enabled (other methods will honor this variable).
	if [ "${quiet:?}" = 'true' ]; then
		NO_STDOUT='true'
	fi

	if [ "${start[@]}" ]; then
		start_services
	fi

	if [ "${stop[@]}" ]; then
		stop_services
	fi

	if [ "${reload[@]}" ]; then
		reload_services
	fi

	if [ "${status[@]}" ]; then
		status_services
	fi

	if [ "${restart[@]}" ]; then
		restart_services
	fi

}

main "${@-}"
